/** @file proc.c
 * 
 * @brief Implementation of `process' syscalls
 *
 * @author Mike Kasick <mkasick@andrew.cmu.edu>
 * @date   Sun, 14 Oct 2007 00:07:38 -0400
 *
 * @author Kartik Subramanian <ksubrama@andrew.cmu.edu>
 * @date 2008-11-12
 */

#include <exports.h>
#include <bits/errno.h>
#include <config.h>
#include <kernel.h>
#include <syscall.h>
#include <sched.h>
#include <arm/reg.h>
#include <arm/psr.h>
#include <arm/exception.h>
#include <arm/physmem.h>
#include <device.h>
#include <assert.h>

double findUtilization(task_t *tasks, size_t num_tasks);
int tasksNotSchedulable(task_t *tasks, size_t num_tasks);
int checkForError(task_t *tasks, size_t num_tasks);
void scheduleTasks(task_t **tasks, size_t num_tasks);


int task_create(task_t* tasks  __attribute__((unused)), size_t num_tasks  __attribute__((unused)))
{
	size_t i; 
	task_t *taskArray[num_tasks];
	// init empty run-queue 
	runqueue_init();

	// Check is number of tasks is within maximum value
	if (num_tasks>62) {
		return -EINVAL;
	}
	else if (!(((unsigned) tasks >= RAM_START_ADDR) && ((unsigned)tasks <= RAM_END_ADDR))) {
		// Check if task space is within valid memory
		return -EFAULT;
	}
	 
	// create task array to house tasks 
	for (i=0;i<num_tasks;i++) {
		taskArray[i] = tasks;
		tasks++;
	}

	// Check if tasks are schedulable
	if (assign_schedule(taskArray, num_tasks) == 1) {
		return -ESCHED;	
	}

	scheduleTasks(taskArray, num_tasks);
	// create TCBs to house tasks and make runnable. 	
	// also launches highest priority task  
	allocate_tasks(taskArray, num_tasks);
	

	assert(0); //task_create only returns error conditions
  	return 1; /* remove this line after adding your code */
}



// ************** helper functions ****************************



// sort from smallest completion time to largest 
void scheduleTasks(task_t **tasks, size_t num_tasks) {
	size_t x; size_t y;
	for (x=0;x<num_tasks;x++) {
		for (y=0;y<num_tasks-1;y++) {
			if (tasks[y]->T > tasks[y+1]->T) {
				// swap 
				task_t *temp = tasks[y];
				tasks[y] = tasks[y+1];
				tasks[y+1] = temp;
			}
		}
	}
}

// find if tasks can be scheduled - 1 if not schedulable
int tasksNotSchedulable(task_t *tasks, size_t num_tasks) {
	double utilization = findUtilization(tasks, num_tasks);
	double UB_BOUND = 0.693;
	if (utilization< UB_BOUND) {
		return 0; 
	}
	return 1;
}


// find total utilization 
double findUtilization(task_t *tasks, size_t num_tasks) {
	size_t i;
	double utilization = 0.0; 		
	for (i=0;i<num_tasks;i++) {
		double period = tasks[i].T;
		double util = tasks[i].C/period;
		utilization += util;
	}
	return utilization;
}


//*****************************************************************


int event_wait(unsigned int dev  __attribute__((unused)))
{
	if (dev > NUM_DEVICES) {
		return -EINVAL;
	}
	dev_wait(dev);
  	
	return 0; // Return 0 to indicate success
}

/* An invalid syscall causes the kernel to exit. */
void invalid_syscall(unsigned int call_num  __attribute__((unused)))
{
	printf("Kernel panic: invalid syscall -- 0x%08x\n", call_num);

	disable_interrupts();
	while(1);
}
