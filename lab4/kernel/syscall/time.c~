/** @file time.c
 *
 * @brief Kernel timer based syscall implementations
 *
 * @author Kartik Subramanian <ksubrama@andrew.cmu.edu>
 * @date   2008-11-16
 */

#include <types.h>
#include <config.h>
#include <bits/errno.h>
#include <arm/timer.h>
#include <syscall.h>
#include <kernel.h>

extern volatile unsigned long clock;
extern unsigned int resolution;

unsigned long time_syscall(void) {
	return clock;	
}

/** @brief Waits in a tight loop for atleast the given number of milliseconds.
 *
 * @param millis  The number of milliseconds to sleep.
 *
 * 
 */
void sleep_syscall(unsigned long millis  __attribute__((unused))) {
	/* If zero delay, no need for calculations */
	if (millis == 0) return;

	int overflow = 0;
	millis = millis/resolution;
	unsigned long start = clock;
	millis += start;
	if (millis < start) overflow++; //set bit to indicate overflow

	while(1) {
		if (overflow){ // if overlow, wait till clock overflows as well
			if (clock < start) overflow = 0;
		}
		else {
			if (millis <= clock) return;
		}
	}
}
