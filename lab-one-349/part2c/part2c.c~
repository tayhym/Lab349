#include <stdlib.h>
#include <stdio.h>

/**
 * Function: oddball
 * Description: Baseline implementation for finding the number that
 *   occurs only once in the array.
 * Arguments:
 *   arr - pointer to start of integer array
 *   len - number of elements in array
 * Return:
 *   The number that occurs only once
 */
#ifdef DEFAULT
int oddball(int *arr, int len) {
	int i, j;
	int foundInner;
	int result = 0;

	for (i = 0; i < len; i++) {
		foundInner = 0;
		for (j = 0; j < len; j++) {
			if (i == j) {
				continue;
			}
			if (arr[i] == arr[j]) {
				foundInner = 1;
			}
		}
		if (foundInner != 1) {
			result = arr[i];
		}
	}

	return result;
}
#endif

/* 
* optimizationOne: i and j made count-down loops. reduces add, cmp, bge   * to subs, blt.   
* optimizationTwo: avoid redundant check (i==j) that is computationally
* expensive (n^2) complexity. instead, let foundInner be compared to 1 (only found ownself). 
* optimizationThree: avoid redundant local variable result. Return 
* value immediately. This reduces space (less assembly code and 1 less * register used to store result) and time (less data * movement 
* instructions like mov).
* optimizationFour: Loop unroll two times to minimize cost of branching (subsand branching instructions, as well as pipeline flush when wrong branch prediction)
*/ 

#ifdef OPTIMIZE1
int oddball(int *arr, int len) {
	/* given in specs that len = 2*n -1, n integer */
	int i,j;
	int foundInner; 
	
	for (i = len-1; i >=0 ; i--) {
		foundInner = 0;
		for (j = len-1; j >= 0; j--) {
			if (arr[i] == arr[j]) {
				foundInner++;
			}
		}
		if (foundInner == 1) {
			return arr[i];
		}
	}


	return 0;
}
#endif

/* Uses a different algorithm to compute the number that occurs only
* once. Achieves O(n) complexity, instead of O(n^2) that is the worst 
* case run-time complexity of the optimize1 version. Computes the  
* expected total and the actual total after running the program. The 
* difference between the 2 numbers is the oddball. Expected total is
* given by twice the arithmetic sum from 1 to N. Sum = N*(firstTerm + * lastTerm)
*/
#ifdef OPTIMIZE2
int oddball(int *arr, int len) {
	int i; 
	int numLen = (len+1)/2;
	// sum = 2*(n/2)*(a1 + aN)
	int expectedSum = numLen*(1+numLen);
	int actualSum = 0;
	
	for (i=len-1;i>=0;i--) {
		actualSum+=arr[i]; 
	}	
	return (expectedSum - actualSum);
}
#endif

/**
 * Function: randGenerator
 * Description: Generate a random array that is in compliance with
 *   lab specification
 * Arguments:
 *   arr - pointer to start of integer array
 *   len - number of elements in array
 * Return:
 *   Unused, but feel free to utilize it.
 */

int randGenerator(int *arr, int len) {
	int i, j, r, rcount;
	for (i = 0; i < len; i++) {
		do {
			rcount = 0;
			r = rand()%(len/2 + 1) + 1;
			for (j = 0; j < i && rcount < 2; j++) {
				if (arr[j] == r) {
					rcount++;
				}
			}
		} while(rcount >= 2);
		arr[i] = r;
		printf("%d ", r);
	}
	printf("\nDone generating\n");
	return 0;
}




